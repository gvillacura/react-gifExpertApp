{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/hooks/useFetchGifs.js","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA1BK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAY,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAAAP,GACxBF,EAAcE,EAAEQ,OAAOF,a,QCIZG,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCSKK,EAfF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACRN,EADQ,iDACwCO,UACpDF,GAFY,gEAIKG,MAAMR,GAJX,cAIRS,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAVvB,kBAaPY,GAbO,4CAAH,sDCqBEM,EAlBM,SAAAb,GACnB,MAA0BpB,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAAAC,GACrBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACd,IAEGe,GCEMK,EAhBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACjB,EAAkCa,EAAab,GAAjCW,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAEtB,OACE,qCACGA,GAAW,4CACZ,6BAAKd,IACL,qBAAKJ,UAAU,YAAf,SACGe,EAAOH,KAAI,SAAAC,GACV,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCOxBW,EAhBM,WACnB,MAAgCzC,mBAAS,CAAC,cAA1C,mBAAOoB,EAAP,KAAiBrB,EAAjB,KAEA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,YAAaA,IAEzBqB,EAASQ,KAAI,SAAApB,GACZ,OAAO,cAAC,EAAD,CAAmBY,SAAUZ,GAAfA,U,MCT7BkC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e7ad6b1b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Proptypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategory }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = e => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategory(cat => [inputValue, ...cat]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategory: Proptypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","const getGifs = async category => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}y&limit=10&api_key=nJd8p5oIHzpkmLpyCNUpDwoKjy1XZt16`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\nexport default getGifs;\r\n","import { useState, useEffect } from \"react\";\r\nimport getGifs from \"../../helpers/getGifs\";\r\n\r\nconst useFetchGifs = category => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(imgs => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport useFetchGifs from \"./hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      {loading && <p>Cargando...</p>}\r\n      <h3>{category}</h3>\r\n      <div className=\"card-grid\">\r\n        {images.map(img => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [category, setCategory] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategory={setCategory} />\r\n\r\n      {category.map(cat => {\r\n        return <GifGrid key={cat} category={cat} />;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}